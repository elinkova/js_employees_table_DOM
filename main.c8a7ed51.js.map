{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tbody","ascStatus","Array","firstElementChild","cells","length","fill","addEventListener","e","target","contains","closest","index","sortedRows","cellIndex","rows","sort","row1","row2","rowA","textContent","replace","rowB","isNaN","localeCompare","append","activeRow","classList","remove","parentNode","add","insertAdjacentHTML","form","inputs","querySelectorAll","button","input","required","pushNotification","text","type","notification","createElement","title","message","titleText","toUpperCase","slice","setAttribute","className","innerHTML","insertAdjacentElement","setTimeout","getDollars","num","result","toLocaleString","style","currency","preventDefault","elements","name","value","trim","position","salary","validity","valid","age","newRow","cloneNode","forEach","cell","reset","editableField","startData","window","getComputedStyle","headCellName","tagName","offices","office","option","selected","pattern","width","focus","saveData","evnt","keyCode","newData"],"mappings":"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","file":"main.c8a7ed51.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\nconst ascStatus = new Array(tbody.firstElementChild.cells.length).fill(true);\n\ntable.addEventListener('click', (e) => {\n  const target = e.target;\n\n  if (!table.contains(target) || !target) {\n    return;\n  }\n\n  if (target.closest('th')) {\n    const index = target.cellIndex;\n    const rows = tbody.rows;\n    let sortedRows;\n\n    if (ascStatus[index]) {\n      ascStatus.fill(true);\n      ascStatus[index] = false;\n\n      sortedRows = [...rows].sort((row1, row2) => {\n        const rowA = row1.cells[index].textContent.replace(/[$,]/g, '');\n        const rowB = row2.cells[index].textContent.replace(/[$,]/g, '');\n\n        if (!isNaN(rowA)) {\n          return rowA - rowB;\n        } else {\n          return rowA.localeCompare(rowB);\n        }\n      });\n    } else {\n      ascStatus[index] = true;\n\n      sortedRows = [...rows].sort((row1, row2) => {\n        const rowA = row1.cells[index].textContent.replace(/[$,]/g, '');\n        const rowB = row2.cells[index].textContent.replace(/[$,]/g, '');\n\n        if (!isNaN(rowA)) {\n          return rowB - rowA;\n        } else {\n          return rowB.localeCompare(rowA);\n        }\n      });\n    }\n\n    tbody.append(...sortedRows);\n  }\n\n  if (target.closest('td')) {\n    const activeRow = table.querySelector('.active');\n\n    if (activeRow) {\n      activeRow.classList.remove('active');\n    }\n    target.parentNode.classList.add('active');\n  }\n});\n\ntable.insertAdjacentHTML('afterend', `\n<form action=\"\" class=\"new-employee-form\">\n  <label>Name:\n    <input name=\"name\" type=\"text\" minlength = \"4\" data-qa=\"name\">\n  </label>\n  <label>Position:\n    <input name=\"position\" type=\"text\" data-qa=\"position\">\n  </label>\n  <label>Office:\n    <select name=\"office\" data-qa=\"office\">\n      <option value=\"Tokyo\" selected>Tokyo</option>\n      <option value=\"Singapore\">Singapore</option>\n      <option value=\"London\">London</option>\n      <option value=\"New York\">New York</option>\n      <option value=\"Edinburgh\">Edinburgh</option>\n      <option value=\"San Francisco\">San Francisco</option>\n    </select>\n  </label>\n  <label>Age:\n    <input name=\"age\" type=\"number\" min=\"18\" max=\"90\" data-qa=\"age\">\n  </label>\n  <label>Salary:\n    <input name=\"salary\" type=\"number\" min=\"1\" data-qa=\"salary\">\n  </label>\n  <button type=\"submit\">Save to table</button>\n</form>\n`);\n\nconst form = document.querySelector('form');\nconst inputs = form.querySelectorAll('input');\nconst button = form.querySelector('button');\n\nfor (const input of inputs) {\n  input.required = true;\n}\n\nbutton.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  if (form.elements.name.value.trim().length === 0\n    || form.elements.position.value.trim().length === 0\n    || form.elements.salary.value.length === 0) {\n    pushNotification('All fields are required', 'error');\n  } else if (form.elements.name.value.trim().length < 4\n    || !form.elements.name.validity.valid) {\n    form.elements.name.value = '';\n\n    pushNotification('Name should contain at least 4 letters', 'error');\n  } else if (!form.elements.age.validity.valid) {\n    form.elements.age.value = '';\n\n    pushNotification('Age should be between 18-90 years', 'error');\n  } else if (!form.elements.salary.validity.valid) {\n    form.elements.salary.value = '';\n\n    pushNotification('You must be kidding', 'error');\n  } else {\n    pushNotification('The new employee is added!', 'success');\n\n    const newRow = table.rows[1].cloneNode(true);\n\n    [...newRow.cells].forEach((cell, index) => {\n      cell.innerHTML = form.elements[index].value;\n      cell.classList.add(`${form.elements[index].name}`);\n\n      if (cell.classList.contains('salary')) {\n        cell.innerHTML = getDollars(cell.innerHTML);\n      }\n    });\n\n    tbody.append(newRow);\n    form.reset();\n  }\n});\n\ntbody.addEventListener('dblclick', (e) => {\n  const target = e.target;\n  const startData = target.textContent;\n  const style = window.getComputedStyle(target);\n  const headCellName = table.rows[0].cells[target.cellIndex].textContent;\n  let editableField;\n\n  if (!target || target.tagName !== 'TD') {\n    return;\n  }\n\n  if (headCellName === 'Office') {\n    editableField = document.createElement('select');\n\n    const offices = document.querySelectorAll('option');\n\n    for (const office of offices) {\n      const option = document.createElement('option');\n\n      option.textContent = office.textContent;\n\n      if (startData === office.textContent) {\n        option.selected = true;\n      } else {\n        option.selected = false;\n      }\n\n      editableField.append(option);\n    }\n  } else {\n    editableField = document.createElement('input');\n    editableField.type = 'text';\n\n    if (headCellName === 'Age' || headCellName === 'Salary') {\n      editableField.pattern = '[0-9]+';\n    }\n  }\n\n  target.textContent = '';\n  editableField.value = startData.replace('$', '').replace(',', '');\n  editableField.style.width = style.width;\n  editableField.className = 'cell-input';\n\n  target.append(editableField);\n  editableField.focus();\n\n  editableField.addEventListener('blur', saveData);\n  editableField.addEventListener('keydown', saveData);\n\n  function saveData(evnt) {\n    if (evnt.keyCode === 13 || evnt.type === 'blur') {\n      const newData = editableField.value.trim();\n\n      if (!newData) {\n        target.textContent = startData;\n        pushNotification('This field can not be empty', 'error');\n      } else if (headCellName === 'Name' && newData.length < 4) {\n        target.textContent = startData;\n        pushNotification('Name should contain at least 4 letters', 'error');\n      } else if ((headCellName === 'Age' && newData < 18)\n      || (headCellName === 'Age' && newData > 90)\n      || (headCellName === 'Age' && !editableField.validity.valid)) {\n        target.textContent = startData;\n        pushNotification('Age should be a number between 18-90', 'error');\n      } else if ((headCellName === 'Salary' && newData < 1)\n      || (headCellName === 'Salary' && !editableField.validity.valid)) {\n        target.textContent = startData;\n        pushNotification('It should be positive number', 'error');\n      } else {\n        editableField.remove();\n\n        if (headCellName === 'Salary') {\n          target.textContent = getDollars(newData);\n        } else {\n          target.textContent = newData;\n        }\n      }\n    }\n  }\n});\n\nfunction pushNotification(text, type) {\n  let notification = document.querySelector('.notification');\n\n  if (notification) {\n    notification.remove();\n  }\n  notification = document.createElement('div');\n\n  const title = document.createElement('h1');\n  const message = document.createElement('p');\n  const titleText = type[0].toUpperCase() + type.slice(1);\n\n  notification.setAttribute('data-qa', 'notification');\n  notification.className = `notification`;\n  notification.classList.add(type);\n  title.className = 'title';\n  title.innerHTML = titleText;\n  message.innerHTML = text;\n\n  notification.append(title, message);\n  form.insertAdjacentElement('afterend', notification);\n\n  setTimeout(() => notification.remove(), 3000);\n}\n\nfunction getDollars(num) {\n  const result = (+num).toLocaleString('en-EN', {\n    style: 'currency', currency: 'USD',\n  }).slice(0, -3);\n\n  return result;\n}\n"]}